git  콘솔 매뉴얼

설치   	sudo apt-get install git
설정 		git config --global user.name "bugnetyama"
		git config --global user.email "bugnetyama@gmail.com"

도움말 	git help <verb>
		git <verb> --help
		man git-<verb>

로컬저장소 만들기  	git init
로컬저장소 복제 	git clone /로컬/저장소/경로

상태보기 	git status
		
		Changes to be committed: 스태징 된 파일들
		Untracked files: 버전관리 제외된 파일들

버전관리에 스태징하는 명령  	git add 파일네임1 파일네임2;
						(코밋후 편집수정후 다시 스태징할 때도 같음)
						(스태징후 코밋전에 또 다시 편집수정후 스탱징할 때도 같음)	

커밋		git commit -m '커밋메세지 블라 블라 ~ ';

푸쉬		git push

로그보기 	git log -p  (-p옵션은 변경된 내용까지 볼 때)

실수로 파일 삭제시 복구 하기
		git checkout -- 파일명     	(git status로 삭제된 파일명을 확인한다.)
일부러 파일을 삭제할때는 
		git rm 파일명
		git commit -m '파일명 삭제'   순을  밟는다. (스태징은 자동으로 됨)
파일명을 바꿀 때는 
		git mv 구파일명 신파일명
		git commit -m '구파일에서 신파일로 이름을 바꿈' (스태징은 자동으로 됨)

조회 명령
	git log : 최신순으로 커밋로그를 조회한다.
	git log -p -2 : 최신순 커밋 2개를 보여주면서 각 커밋간의 차이점을 diff로 보여준다.
	git log --pretty=format:"%h %s" --graph : 커밋간의 변경점을 그래프로 보여준다.
	git log --pretty=oneline : 로그를 한줄로 보여준다.
	git log --since=2.weeks : 지난 2주간의 커밋을 보여준다.
	git log -- path1 path2 : path1, path2의 커밋이력을 보여준다.
	gitk : 커밋이력을 GUI 응용프로그램으로 보여준다.
	git log -p HEAD..FETCH_HEAD :
	fetch 명령을 실행한 후에 사용한다. fetch를 하면 실제 로컬 저장소에는 변경사항이 반영되지 않는다. 로컬저장소에 원격저장소의 변경사항을 반영하기 전에 이 명령을 실행해서 원격 저장소와 로컬 저장소 사이의 차이점을 비교해보고 문제가 없다면 merge 한다.  
	옵션
	-(n) 최근 n 개의 커밋만 조회한다.
	--since, --after 명시한 날짜 이후의 커밋만 검색한다.
	--until, --before 명시한 날짜 이전의 커밋만 조회한다.
	--author 입력한 저자의 커밋만 보여준다.
	--committer 입력한 커미터의 커밋만 보여준다.
	커밋조회와 함께 사용되는 명령들
	git revert HEAD : 마지막 커밋 상태로 돌려준다.
	git revert $id : $id로 지정한 커밋의 상태로 돌려준다.
	git checkout -f : 마지막 커밋한 상태로 돌려준다.
	git reset --hard : 마지막 커밋한 상태로 돌려준다. (=git checkout -f)

복원이란?
	현재의 파일을 특정한 시점의 파일 상태로 변경하는 작업

	복원에 사용되는 주요 명령들
	revert : 이미 commit된 상태를 특정한 시점으로 복원한다. 복원된 내용을 새로운 커밋으로 발행함
	http://git-animals.tumblr.com/post/23209569792/baby-elephant-charge-fail
	reset : 스테이징이나 커밋을 취소할 때 사용됨, 커밋되지 않음.
	checkout : 브랜치를 변경하고, 특정 브랜치의 내용으로 현재 브랜치의 파일을 변경함

복원
	참조 http://ecogeo.tistory.com/276

	reset의 옵션
	--soft : staging area(index) 보존, working directory 보존. 즉 모두 보존.
	--mixed : staging area 취소, working directory 보존 (기본 옵션)
	--hard : staging area 취소, working directory 취소. 즉 모두 취소.
	reset과 revert의 차이점
	reset은 해당 커밋의 상태로 되돌리는 명령이다. 그렇기 때문에 reset 뒤에 커밋 아이디를 지정하면 해당 커밋이 취소되는 것이 아니라, 해당 커밋 이후의 변경점이 취소되는 것이다. revert는 선택한 커밋이 취소되는 것이 아니라, 해당 커밋을 취소하는 커밋이 추가되는 것이다. 

	다른 브랜치를 잘못 merge 했을 때의 조치
	만약 master 브랜치에 wrong라는 이름의 브랜치를 실수로 merge 했다면 아래와 같은 명령으로 master 브랜치를 원격 저장소 (origin master)와 동일한 상태로 전환 할 수 있다.
	
	git reset —hard origin/master

브랜치의 방법
	브랜치에 대한 의사결정
		git branch hide_follow
		follow 숫자를 감추는 브랜치를 만든다.
		git branch
		브랜치의 리스트를 열람한다.
		git checkout hide_follow
		브랜치를 hide_follow로 변경한다.
		작업을 한다.
		git add 작업한 파일을 staged 상태로 추가
		git commit -m '작업이력'
		커밋해서 저장소에 반영
	브랜치가 채택되었다.
		git checkout master
		git merge hide_follow
	브랜치가 기각되었다.
		git branch -D hide_follow
		브랜치 삭제

협업 주요명령
	리모트 저장소 복제
	git clone (리모트 저장소 URL)
	리모트 저장소의 추가
	git add (리모트 저장소의 별명) (리모트 저장소의 URL)
	리모트 저장소의 삭제
	git remote rm (리모트 저장소의 별명)
	리모트 브랜치와 동기화
	git fetch (리모트 저장소의 별명) (리모트 브랜치)
	(리모트 저장소 별명)에 해당하는 저장소의 (리모트 브랜치)를 현재 선택된 로컬 브랜치로 가져온다.
	git pull (리모트 저장소의 별명) (리모트 브랜치)
	git fetch명령을 실행하고 자동으로 merge(병합) 하기
	git push (리모트 저장소의 별명) (리모트 브랜치)
	(리모트 저장소 별명)의 (리모트 브랜치)로 로컬 브랜치를 전송한다.
	이 명령을 수행하기 전에 git fetch나 git pull을 수행한다.
	리모트 브랜치 생성
	git checkout -b (새로운 브랜치)
	(새로운 브랜치)를 로컬 브랜치로 만든다.
	git push (리모트 저장소) (리모트 브랜치)
	(리모트 저장소)에 (리모트 브랜치)를 생성하고 현재의 로컬 브랜치와 추적상태를 만든다.
	리모트 브랜치 현황보기
	git remote
	로컬 브랜치에 연결되어 있는 리모트 브랜치 리스트 보기
	git remote show (리모트 브랜치)
	(리모트 브랜치)와 로컬브랜치의 관계를 상세히 보기
	리모트 브랜치 삭제
	git push (리모트 저장소의 별명) :(리모트 브랜치)
	(리모트 저장소의 별명)의 (리모트 브랜치를 삭제) ':' 앞에 뛰어쓰기해야 함

git fetch VS git pull
	git fetch와 git pull 중 어떤 것이 더 나은 방법일까? 정답은 없지만 git fetch가 더 바람직하다. git fetch는 원격저장소의 내용을 모두 가져오지만 그것을 working copy에 합치지 않는다. 다시 말해서 소스가 변경되지 않는다는 것이다. 그럼 어떻게 해야 코드가 최신 상태가 될까? git merge 명령을 실행시키면 된다. 그럼 fetch를 통해서 가져온 원격 저장소의 소스와 자신이 작업하고 있었던 소스가 병합(merge) 된다. 

	간단하게 pull하면 되는데 fetch를 하는 이유는 무엇일까? fetch를 하면 실제로는 working copy에 반영되지 않기 때문에 원격 저장소와 로컬 저장소 사이의 차이점을 비교 할 수 있다. 문제점이 있는지 여부를 미리 검토 할 수 있는 것이다. 필자의 경우 fetch를 이용하는 경우 아래와 같은 흐름으로 작업을 한다. 

	git fetch; #원격 저장소에서 로컬 저장소로 변경점을 가져온다. 단, Working Copy에는 반영하지 않는다.
	git log git log ..origin/master; #fetch를 이용해서 가져온 변경점과 Working Copy 사이의 차이점만 보여준다.
	git merge; #fetch를 이용해서 가져온 내용을 Working Copy에 반영한다. 만약 fetch를 이용해서 가져온 변경 점 중에 특정 커밋 이전만 Working Copy에 반영하고 싶다면 git merge 뒤에 커밋 ID를 붙인다. 

태그 주요명령
	git tag : Tag 리스트를 보여줌
	git tag -l 'v1.4.2.*' : 'v1.4.2'로 시작하는 태그들의 리스트를 보여줌
	git tag v1.1 : 현재의 HEAD를 태그 v1.1로 저장
	git tag v1.2 9fceb02 : 커밋 아이디 9fceb02를 v1.2 태그로 지정함
	git tag -a v1.2 : annotated tag로 v1.2태그를 생성함
	git show v1.2 : v1.2 태그에 대한 상세한 정보 열람
	 
	git push origin v1.5 : git은 태그를 push할 때 자동으로 리모트로 저장하지 않기 때문에 명시해야 한다.
	git push origin --tags : 모든 태그를 원격저장소에 반영함

SSH를 이용한 리모트 저장소 구축
	서버에 저장소를 설치한다.
	1
	2
	3
	4
	5
	6
	7
	8
	apt-get install git (ubuntu)  # git을 서버에 설치한다.
	cd /opt; # /opt/projects/my_project를 원격저장소로 사용한다.
	mkdir projects;
	cd projects;
	mkdir my_project;
	cd my_project;
	git init --bare --shared; # 최초로 원격저장소를 생성하는 경우
	git clone --bare --shared url; # 이미 사용중인 저장소가 있는 경우
	사용자 권한을 부여한다. 
	1
	2
	3
	4
	5
	sudo adduser git; # 관리자 권한으로 사용자 Git을 생성한다. 
	su git; # 사용자 git으로 로그인 한다. 
	chown -R git:git /opt/projects
	cd; # 사용자 git 의 home 디렉토리로 이동한다. 
	mkdir .ssh; # 만약 홈 디렉토리에 .ssh디렉토리가 없다면 생성한다.
	사용자의 로컬 컴퓨터에 ssh key을 생성한다.
	1
	2
	3
	cd ~/.ssh; # 사용자 홈디렉토리 중 .ssh 디렉토리에 id_dsa, id_rsa라는 이름의 파일이 있는지 확인한다. 
	ssh-keygen; # ssh key 생성도구를 실행시킨다. 
	scp id_rsa.pub git@url:/home/git/id_rsa.pub; # 공개키를 서버로 전송한다.
	원격저장소의 서버에 *.pub 파일을 등록한다.
	1
	cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
	접속 테스트
	아래와 같이 접속했을 때 로그인 절차가 없이 바로 로그인이 되어야 한다.

	1
	ssh git@원격저장소의 url
	보안을 위해서 쉘기능을 제한
	1
	sudo vim /etc/passwd 
	아래의 내용을 찾는다.

	git:x:1000:1000::/home/git:/bin/sh

	아래와 같은 내용으로 변경한다.

	git:x:1000:1000::/home/git:/usr/bin/git-shell

	이제 ssh를 이용해서 접속을 시도하면 서버가 아래와 같은 메시지를 출력하면서 거부한다.

	$ ssh git@gitserver
	fatal: What do you think I am? A shell?
	Connection to gitserver closed.

	원격저장소, 원격브랜치를 이용한 협업
	http://opentutorials.org/course/303/2290
